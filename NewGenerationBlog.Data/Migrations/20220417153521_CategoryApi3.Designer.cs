// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NewGenerationBlog.Data.Concrete.EntityFramework.Contexts;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace NewGenerationBlog.Data.Migrations
{
    [DbContext(typeof(NewGenerationBlogContext))]
    [Migration("20220417153521_CategoryApi3")]
    partial class CategoryApi3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("NewGenerationBlog.Entities.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("DATE");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("BOOLEAN");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("DATE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedById = 1,
                            CreatedDate = new DateTime(2022, 4, 17, 18, 35, 20, 323, DateTimeKind.Local).AddTicks(8910),
                            Description = "C# ile ilgili en güncel bilgiler",
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2022, 4, 17, 18, 35, 20, 323, DateTimeKind.Local).AddTicks(9360),
                            Name = "C#",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedById = 1,
                            CreatedDate = new DateTime(2022, 4, 17, 18, 35, 20, 324, DateTimeKind.Local).AddTicks(110),
                            Description = "C++ ile ilgili en güncel bilgiler",
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2022, 4, 17, 18, 35, 20, 324, DateTimeKind.Local).AddTicks(110),
                            Name = "C++",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedById = 1,
                            CreatedDate = new DateTime(2022, 4, 17, 18, 35, 20, 324, DateTimeKind.Local).AddTicks(120),
                            Description = "Javascript ile ilgili en güncel bilgiler",
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2022, 4, 17, 18, 35, 20, 324, DateTimeKind.Local).AddTicks(120),
                            Name = "Javascript",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("NewGenerationBlog.Entities.Concrete.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("CommentCount")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("DATE");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("BOOLEAN");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("BOOLEAN");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("DATE");

                    b.Property<string>("SeoAuthor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SeoDecription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("SeoTags")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("ViewsCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CommentCount = 0,
                            Content = "Lorem Ipsum, dizgi ve baskı endüstrisinde kullanılan mıgır metinlerdir. Lorem Ipsum, adı bilinmeyen bir matbaacının bir hurufat numune kitabı oluşturmak üzere bir yazı galerisini alarak karıştırdığı 1500'lerden beri endüstri standardı sahte metinler olarak kullanılmıştır. Beşyüz yıl boyunca varlığını sürdürmekle kalmamış, aynı zamanda pek değişmeden elektronik dizgiye de sıçramıştır. 1960'larda Lorem Ipsum pasajları da içeren Letraset yapraklarının yayınlanması ile ve yakın zamanda Aldus PageMaker gibi Lorem Ipsum sürümleri içeren masaüstü yayıncılık yazılımları ile popüler olmuştur.",
                            CreatedById = 1,
                            CreatedDate = new DateTime(2022, 4, 17, 18, 35, 20, 332, DateTimeKind.Local).AddTicks(2520),
                            Date = new DateTime(2022, 4, 17, 18, 35, 20, 332, DateTimeKind.Local).AddTicks(1310),
                            IsDeleted = false,
                            IsPublic = false,
                            ModifiedDate = new DateTime(2022, 4, 17, 18, 35, 20, 332, DateTimeKind.Local).AddTicks(2550),
                            SeoAuthor = "Serkan İşel",
                            SeoDecription = "C# 9.0 ve .net 5 yenilikleri",
                            SeoTags = "C#,C# 9, .NET5, .NET Framework, .NET Core",
                            Thumbnail = "Default.jpg",
                            Title = "C# 9.0 ve .net 5 yenilikleri",
                            UserId = 1,
                            ViewsCount = 100
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CommentCount = 0,
                            Content = "Lorem Ipsum, dizgi ve baskı endüstrisinde kullanılan mıgır metinlerdir. Lorem Ipsum, adı bilinmeyen bir matbaacının bir hurufat numune kitabı oluşturmak üzere bir yazı galerisini alarak karıştırdığı 1500'lerden beri endüstri standardı sahte metinler olarak kullanılmıştır. Beşyüz yıl boyunca varlığını sürdürmekle kalmamış, aynı zamanda pek değişmeden elektronik dizgiye de sıçramıştır. 1960'larda Lorem Ipsum pasajları da içeren Letraset yapraklarının yayınlanması ile ve yakın zamanda Aldus PageMaker gibi Lorem Ipsum sürümleri içeren masaüstü yayıncılık yazılımları ile popüler olmuştur.",
                            CreatedById = 1,
                            CreatedDate = new DateTime(2022, 4, 17, 18, 35, 20, 332, DateTimeKind.Local).AddTicks(2940),
                            Date = new DateTime(2022, 4, 17, 18, 35, 20, 332, DateTimeKind.Local).AddTicks(2940),
                            IsDeleted = false,
                            IsPublic = false,
                            ModifiedDate = new DateTime(2022, 4, 17, 18, 35, 20, 332, DateTimeKind.Local).AddTicks(2940),
                            SeoAuthor = "Serkan İşel",
                            SeoDecription = "C++ nedir?",
                            SeoTags = "C++,,C",
                            Thumbnail = "Default.jpg",
                            Title = "C++ nedir?",
                            UserId = 1,
                            ViewsCount = 90
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            CommentCount = 0,
                            Content = "Lorem Ipsum, dizgi ve baskı endüstrisinde kullanılan mıgır metinlerdir. Lorem Ipsum, adı bilinmeyen bir matbaacının bir hurufat numune kitabı oluşturmak üzere bir yazı galerisini alarak karıştırdığı 1500'lerden beri endüstri standardı sahte metinler olarak kullanılmıştır. Beşyüz yıl boyunca varlığını sürdürmekle kalmamış, aynı zamanda pek değişmeden elektronik dizgiye de sıçramıştır. 1960'larda Lorem Ipsum pasajları da içeren Letraset yapraklarının yayınlanması ile ve yakın zamanda Aldus PageMaker gibi Lorem Ipsum sürümleri içeren masaüstü yayıncılık yazılımları ile popüler olmuştur.",
                            CreatedById = 1,
                            CreatedDate = new DateTime(2022, 4, 17, 18, 35, 20, 332, DateTimeKind.Local).AddTicks(2950),
                            Date = new DateTime(2022, 4, 17, 18, 35, 20, 332, DateTimeKind.Local).AddTicks(2950),
                            IsDeleted = false,
                            IsPublic = false,
                            ModifiedDate = new DateTime(2022, 4, 17, 18, 35, 20, 332, DateTimeKind.Local).AddTicks(2950),
                            SeoAuthor = "Serkan İşel",
                            SeoDecription = "Javascript Nedir?",
                            SeoTags = "Javascript",
                            Thumbnail = "Default.jpg",
                            Title = "Javascript Nedir?",
                            UserId = 1,
                            ViewsCount = 110
                        });
                });

            modelBuilder.Entity("NewGenerationBlog.Entities.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("DATE");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("BOOLEAN");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("DATE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedById = 1,
                            CreatedDate = new DateTime(2022, 4, 17, 18, 35, 20, 333, DateTimeKind.Local).AddTicks(9670),
                            Description = "Super User, Have all rights",
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2022, 4, 17, 18, 35, 20, 333, DateTimeKind.Local).AddTicks(9690),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("NewGenerationBlog.Entities.Concrete.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("NewGenerationBlog.Entities.Concrete.TagPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("DATE");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("BOOLEAN");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("DATE");

                    b.Property<int>("PostId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("TagId");

                    b.ToTable("TagPosts");
                });

            modelBuilder.Entity("NewGenerationBlog.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("DATE");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("DATE");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("BOOLEAN");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Mobile")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("DATE");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BYTEA");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1980, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 1,
                            CreatedDate = new DateTime(2022, 4, 17, 18, 35, 20, 337, DateTimeKind.Local).AddTicks(2920),
                            Description = "Owner Of the system",
                            Email = "serkanisel@gmail.com",
                            FirstName = "Serkan",
                            IsDeleted = false,
                            LastName = "İşel",
                            Mobile = "532 586 6292",
                            ModifiedDate = new DateTime(2022, 4, 17, 18, 35, 20, 337, DateTimeKind.Local).AddTicks(2930),
                            PasswordHash = new byte[] { 49, 48, 50, 52, 98, 51, 52, 56, 54, 102, 97, 97, 101, 100, 101, 56, 57, 48, 52, 101, 52, 102, 101, 53, 54, 97, 102, 102, 50, 102, 102, 49 },
                            Picture = "",
                            RoleId = 1,
                            Username = "sisel"
                        });
                });

            modelBuilder.Entity("NewGenerationBlog.Entities.Concrete.Category", b =>
                {
                    b.HasOne("NewGenerationBlog.Entities.Concrete.User", "User")
                        .WithMany("Categories")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Post_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NewGenerationBlog.Entities.Concrete.Post", b =>
                {
                    b.HasOne("NewGenerationBlog.Entities.Concrete.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Post_Category")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewGenerationBlog.Entities.Concrete.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Post_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NewGenerationBlog.Entities.Concrete.TagPost", b =>
                {
                    b.HasOne("NewGenerationBlog.Entities.Concrete.Post", "Post")
                        .WithMany("TagPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewGenerationBlog.Entities.Concrete.Tag", "Tag")
                        .WithMany("TagPosts")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("NewGenerationBlog.Entities.Concrete.User", b =>
                {
                    b.HasOne("NewGenerationBlog.Entities.Concrete.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("NewGenerationBlog.Entities.Concrete.Category", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("NewGenerationBlog.Entities.Concrete.Post", b =>
                {
                    b.Navigation("TagPosts");
                });

            modelBuilder.Entity("NewGenerationBlog.Entities.Concrete.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("NewGenerationBlog.Entities.Concrete.Tag", b =>
                {
                    b.Navigation("TagPosts");
                });

            modelBuilder.Entity("NewGenerationBlog.Entities.Concrete.User", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
